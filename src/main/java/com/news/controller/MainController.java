package com.news.controller;

import com.news.model.News;
import com.news.model.User;
import com.news.repository.NewsRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.web.PageableDefault;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.StringUtils;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import java.io.File;
import java.io.IOException;
import java.util.Map;
import java.util.Set;
import java.util.UUID;

@Controller // This means that this class is a Controller
public class MainController {
    @Autowired // This means to get the bean called NewsRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private NewsRepository newsRepository;


    //указываем спрингу что хотим получить переменную ${upload.path},
    // ищет путь характерного свойства и вставляет в пременную
    @Value("${upload.path}")
    private String uploadPath;

    @GetMapping("/") // Map ONLY GET Requests
    public String greeting(Map<String, Object> model) {
        return "greeting";
    }


    // метод ожидает на вход параметр  фильтр, required = false - необязательный,
    //   со значением по умолчанию свободное поле defaultValue = ""
    @GetMapping("/main")
    public String main(

            @RequestParam(required = false, defaultValue = "") String filter,
            //  model -то куда будем складывать данные которые хотим вернуть пользователю
            Model model,
            //  задается сортировка по id
            @PageableDefault(sort = {"id"},
                    // с  указанием направления движения по убыванию,
                    //   т.е. будем показывать сообщения , которые были созданы последними
                    direction = Sort.Direction.DESC) Pageable pageable
    ) {
        Page<News> page;

        // если  пользовтель не задал фильт или фильтр пустой, то ищем по Title (возвращаем список сообщений)
        if (filter != null && !filter.isEmpty()) {
            page = newsRepository.findByTitle(filter, pageable);
        } else {
            // если фильтр был задан,то возвращаем весь список
            page = newsRepository.findAll(pageable);
        }


        model.addAttribute("page", page);
        model.addAttribute("url", "/main");
        model.addAttribute("filter", filter);

        // возвращаем имя файла контейнеру которому  хотим отобразить имя файла main
        return "main";
    }

//  метод добавления сообщений
    @PostMapping("/main")
    public String add(
            @AuthenticationPrincipal
                    User user,
            // аннотация подтверждает действительность
            @Valid
                    News news,
            BindingResult bindingResult, // список аргументов с полученными ошибками подтверждения
            Model model,

            @RequestParam("file")
            MultipartFile file

    ) throws IOException {
        // установка текста автором
        news.setAuthor(user);
        // проверка , есть ли   ошибки подтверждения
        if (bindingResult.hasErrors()) {
            //текст не соответсвует требованиям, которые установлены в классе News,
            //получим все ошиьки в errorsMap
            Map<String, String> errorsMap = ControllerUtils.getErrors(bindingResult);

            model.mergeAttributes(errorsMap);
            model.addAttribute("message", news);
            // подтверждение действительности
        } else {
            saveFile(news, file);
            // в случае прохождения проверки, нужно удалить из модели наш текст, иначе после
            //добавления опять получим открытую форму, в которой будет выведено сообщение, что только ввели
            model.addAttribute("message", null);
            // сохраняется текст
            newsRepository.save(news);
        }

        Iterable<News> tidings = newsRepository.findAll();

        model.addAttribute("messages", tidings);

        return "main";
    }

    private void saveFile(
            @Valid News news,
            @RequestParam("file") MultipartFile file
    )
            throws IOException {
        //сохраняется файл только, если у него задано имя файла
        if (file != null && !file.getOriginalFilename().isEmpty()) {
            File uploadDir = new File(uploadPath);
            //если каталог не существует , то загружать по умалчанию в mkdir
            if (!uploadDir.exists()) {
                uploadDir.mkdir();
            }
            //подтвержение уникального имени файла
            String uuidFile = UUID.randomUUID().toString();
            String resultFilename = uuidFile + "." + file.getOriginalFilename();
            // загрузить файл
            file.transferTo(new File(uploadPath + "/" + resultFilename));

            news.setFilename(resultFilename);
        }
    }

    @GetMapping("/user-news/{user}")
    public String userNews(
            //принимает текущего пользователя из сессии
            @AuthenticationPrincipal User currentUser,
            //смотрим какого пользователя запрашивааем
            @PathVariable User user,
            Model model,
            //параметр сообщений необязательный
            @RequestParam(required = false) News news
    ) {
        Set<News> tidings = user.getTidings();
        // модель с атрибутами
        model.addAttribute("userChannel", user);
        model.addAttribute("subscriptionsCount", user.getSubscriptions().size());
        model.addAttribute("subscribersCount", user.getSubscribers().size());
        model.addAttribute("isSubscriber", user.getSubscribers().contains(currentUser));
        model.addAttribute("messages", tidings);
        model.addAttribute("message", news);
        model.addAttribute("isCurrentUser", currentUser.equals(user));


        //возвращает шаблон текстов пользователя
        return "user-news";
    }
    // обработка сохранения текста
    @PostMapping("/user-news/{user}")
    public String updateNews(
            @AuthenticationPrincipal User currentUser,
            @PathVariable Long user,
            //получить параметры
            @RequestParam("news") News news,
            @RequestParam("text") String text,
            @RequestParam("title") String title,
            @RequestParam("file") MultipartFile file
    ) throws IOException {
        //проверка безопасности, где пользователь меняет только свои сообщения
        if (news.getAuthor().equals(currentUser)) {
            // если не считает поле текста пустым
            if (!StringUtils.isEmpty(text)) {
                //тогда запись обновляется в поле текст
                news.setText(text);
            }
            // если не считает поле тэга пустым
            if (!StringUtils.isEmpty(title)) {
                //тогда запись обновляется в поле тэг
                news.setTitle(title);
            }

            saveFile(news, file);
            //сохранить текст
            newsRepository.save(news);
        }
         //перенаправление пользователя на эту же страницу
        return "redirect:/user-news/" + user;
    }
}

